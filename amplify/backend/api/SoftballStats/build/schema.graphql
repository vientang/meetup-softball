type GameStats {
  id: ID!
  name: String!
  meetupId: String
  gameId: String
  date: String
  year: String
  month: String
  field: String
  tournamentName: String
  lat: String
  lon: String
  time: String
  timeStamp: String
  rsvps: String
  waitListCount: String
  winners: AWSJSON
  losers: AWSJSON
}

type PlayerStats {
  id: ID!
  name: String!
  joined: String
  meetupId: String
  profile: AWSJSON
  admin: Boolean
  photos: AWSJSON
  status: String
  gender: String
  games: AWSJSON
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelGameStatsConnection {
  items: [GameStats]
  nextToken: String
}

input ModelStringFilterInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
}

input ModelIDFilterInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
}

input ModelIntFilterInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  contains: Int
  notContains: Int
  between: [Int]
}

input ModelFloatFilterInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  contains: Float
  notContains: Float
  between: [Float]
}

input ModelBooleanFilterInput {
  ne: Boolean
  eq: Boolean
}

input ModelGameStatsFilterInput {
  id: ModelIDFilterInput
  name: ModelStringFilterInput
  meetupId: ModelStringFilterInput
  gameId: ModelStringFilterInput
  date: ModelStringFilterInput
  year: ModelStringFilterInput
  month: ModelStringFilterInput
  field: ModelStringFilterInput
  tournamentName: ModelStringFilterInput
  lat: ModelStringFilterInput
  lon: ModelStringFilterInput
  time: ModelStringFilterInput
  timeStamp: ModelStringFilterInput
  rsvps: ModelStringFilterInput
  waitListCount: ModelStringFilterInput
  winners: ModelStringFilterInput
  losers: ModelStringFilterInput
  and: [ModelGameStatsFilterInput]
  or: [ModelGameStatsFilterInput]
  not: ModelGameStatsFilterInput
}

type Query {
  getGameStats(id: ID!): GameStats
  listGameStatss(filter: ModelGameStatsFilterInput, limit: Int, nextToken: String): ModelGameStatsConnection
  getPlayerStats(id: ID!): PlayerStats
  listPlayerStatss(filter: ModelPlayerStatsFilterInput, limit: Int, nextToken: String): ModelPlayerStatsConnection
}

input CreateGameStatsInput {
  id: ID
  name: String!
  meetupId: String
  gameId: String
  date: String
  year: String
  month: String
  field: String
  tournamentName: String
  lat: String
  lon: String
  time: String
  timeStamp: String
  rsvps: String
  waitListCount: String
  winners: AWSJSON
  losers: AWSJSON
}

input UpdateGameStatsInput {
  id: ID!
  name: String
  meetupId: String
  gameId: String
  date: String
  year: String
  month: String
  field: String
  tournamentName: String
  lat: String
  lon: String
  time: String
  timeStamp: String
  rsvps: String
  waitListCount: String
  winners: AWSJSON
  losers: AWSJSON
}

input DeleteGameStatsInput {
  id: ID
}

type Mutation {
  createGameStats(input: CreateGameStatsInput!): GameStats
  updateGameStats(input: UpdateGameStatsInput!): GameStats
  deleteGameStats(input: DeleteGameStatsInput!): GameStats
  createPlayerStats(input: CreatePlayerStatsInput!): PlayerStats
  updatePlayerStats(input: UpdatePlayerStatsInput!): PlayerStats
  deletePlayerStats(input: DeletePlayerStatsInput!): PlayerStats
}

type Subscription {
  onCreateGameStats: GameStats @aws_subscribe(mutations: ["createGameStats"])
  onUpdateGameStats: GameStats @aws_subscribe(mutations: ["updateGameStats"])
  onDeleteGameStats: GameStats @aws_subscribe(mutations: ["deleteGameStats"])
  onCreatePlayerStats: PlayerStats @aws_subscribe(mutations: ["createPlayerStats"])
  onUpdatePlayerStats: PlayerStats @aws_subscribe(mutations: ["updatePlayerStats"])
  onDeletePlayerStats: PlayerStats @aws_subscribe(mutations: ["deletePlayerStats"])
}

type ModelPlayerStatsConnection {
  items: [PlayerStats]
  nextToken: String
}

input ModelPlayerStatsFilterInput {
  id: ModelIDFilterInput
  name: ModelStringFilterInput
  joined: ModelStringFilterInput
  meetupId: ModelStringFilterInput
  profile: ModelStringFilterInput
  admin: ModelBooleanFilterInput
  photos: ModelStringFilterInput
  status: ModelStringFilterInput
  gender: ModelStringFilterInput
  games: ModelStringFilterInput
  and: [ModelPlayerStatsFilterInput]
  or: [ModelPlayerStatsFilterInput]
  not: ModelPlayerStatsFilterInput
}

input CreatePlayerStatsInput {
  id: ID
  name: String!
  joined: String
  meetupId: String
  profile: AWSJSON
  admin: Boolean
  photos: AWSJSON
  status: String
  gender: String
  games: AWSJSON
}

input UpdatePlayerStatsInput {
  id: ID!
  name: String
  joined: String
  meetupId: String
  profile: AWSJSON
  admin: Boolean
  photos: AWSJSON
  status: String
  gender: String
  games: AWSJSON
}

input DeletePlayerStatsInput {
  id: ID
}
